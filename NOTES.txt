1) Install socket.io

> npm install socket.io

2) Start sync.js

> node sync.js

 ... show console , show :8080 , show javascript library  http://localhost:8080/socket.io/socket.io.js

3) Copy in javascript to php app:

	<script src="http://localhost:8080/socket.io/socket.io.js" type="text/javascript"></script>
	<script type="text/javascript">
		$(function () {						
			var Socket = io.connect('http://localhost:8080');
		});
	</script>


..... 

Install redis

advanced key-value store. publish/subscribe functionality

http://redis.io/topics/quickstart

> wget http://download.redis.io/redis-stable.tar.gz
> tar xvzf redis-stable.tar.gz
> cd redis-stable
> make

4) Start redis

Users/dclaysmith/redis-2.4.11/src > ./redis-server

... show logs

5) Install the redis client for node

> npm install redis

6) Add in the redis client lines

var redis		= require("redis").createClient();

redis.subscribe("/todo");

console.log('Subscribed to redis channel "todo"...');


... restart sync... show redis console


7) Install predis (php redis client)

https://github.com/nrk/predis

... include class.redis.php .... add in the code required for each add / update / delete

		publishToRedis(json_encode(array("event" => "add", "data" => array("id" => $id, "todo" => $todo))));
		publishToRedis(json_encode(array("event" => "update", "data" => array("id" => $id, "todo" => $todo))));
		publishToRedis(json_encode(array("event" => "delete", "data" => array("id" => $id))));

8) Tell redis client to listen for messages

redis.on("message", function(channel, message){

	console.log("Received a message on channel %s : %s", channel, message);

});

9) Broadcast the event to all clients

	data = JSON.parse(message);

	io.sockets.volatile.emit('message', data);

10) Add a listener to php script to print incoming messages...


			Socket.on('message', function (data) {
				console.log(data.event);
			});

11)  Expand to add handlers for different events


	switch (message.event) {
		case "delete":
			$("#item-" + data.id).remove();
			break;
		case "update":
			$("span", "#item-" + data.id).text(data.todo);
			break;
		case "add":
			$("ul").append('<li id="item-' + data.id + '"><span data-id="' + data.id + '">' + data.todo + '</span> [<a href="?delete=true&id=' + data.id + '">Delete</a>]</li>');
			break;
	}	
---------------------------------------------------

Considerations:

1) Broadcast vs. Emit . You don't want to receive messages for actions you initiated.

2) Authorization . 


---------------------------------------------------

Alternatives

http://pusher.com/docs/javascript_quick_start


